.. toctree::
    :maxdepth: 400
    :caption: General information

.. |br| raw:: html

   <br />

Creating a recommendation
===========================

Companies can recommend on companies. Recommendations are sort of "Likes". |br|
A recommendation cannot be posted on behalf of a company that does not belong to the authenticated user. This will result in a ```HTTP 403 FORBIDDEN``` error. |br| |br|
That being said, to create a recommendation, we use the HTTP ```POST``` method:

.. code-block:: javascript

    $.ajax({
        url: 'http://localhost:8000/recommendations/',
        type: 'POST',
        // Fetch the stored token from localStorage and set in the header
        beforeSend: function (xhr) {
          xhr.setRequestHeader("Authorization", 'Token '+ localStorage.getItem('token'));
        },
        data: {
          by_company: 1,
          for_company: 3,
        },
        success: function (response) {
          console.log(response);
        }
    });

Accessing all recommendations
================================

In order to obtain an object of all recommendations, we use the HTTP ```GET``` method:

.. code-block:: javascript

    $.ajax({
        url: 'http://localhost:8000/recommendations/',
        type: 'GET',
        // Fetch the stored token from localStorage and set in the header
        beforeSend: function (xhr) {
          xhr.setRequestHeader("Authorization", 'Token '+ localStorage.getItem('token'));
        },
        success: function (response) {
          console.log(response);
        }
    });

Paginating a list of recommendations
=====================================

By default, the API will return an object containing 3 recommendations, and will indicate the url to the next page. |br|
For example, if we have 5 recommendations in total, then we'll have 2 pages. |br|
For obtaining the first 3, ```http://localhost:8000/recommendations/``` is enough. |br|
To go to the last 2, we need to change page: ```http://localhost:8000/recommendations/?page=2``` |br|

The default number of items per page can be set by changing the ```PAGE_SIZE``` setting in ```settings.py```, under ```REST_FRAMEWORK``` options.

Filtering a list of recommendations
=====================================

**Filters** other than pagination cannot be applied for recommendations as of this version. |br|
This is going to be fixed in a future release.

Accessing one specific recommendations
=========================================

In order to access the data about a recommendation, we use also the HTTP ```GET``` method:

.. code-block:: javascript

    $.ajax({
        url: 'http://localhost:8000/recommendations/2/',
        type: 'GET',
        // Fetch the stored token from localStorage and set in the header
        // beforeSend: function (xhr) {
        //   xhr.setRequestHeader("Authorization", 'Token '+ localStorage.getItem('token'));
        // },
        success: function (response) {
          console.log(response);
        }
    });

As you can notice here, the token section is commented out. That is because recommendations data can be accessed with or without being authenticated. |br| |br|
However, trying to achieve this for other operations will result in ```HTTP 401 UNAUTHORIZED```

Updating a recommendation
==========================

To update a recommendation, we can use the HTTP ```PUT``` method. |br|
This method requires that all the recommendation fields are sent. |br|

.. code-block:: javascript

    $.ajax({
        url: 'http://localhost:8000/recommendations/',
        type: 'PUT',
        // Fetch the stored token from localStorage and set in the header
        beforeSend: function (xhr) {
          xhr.setRequestHeader("Authorization", 'Token '+ localStorage.getItem('token'));
        },
        data: {
          by_company: 1,
          for_company: 7,
        },
        success: function (response) {
          console.log(response);
        }
    });


Deleting a recommendation
==========================

Take note that a recommendation can only be deleted if it was published by a company that belongs to the currently authenticated user. |br| |br|
In order to remove a recommendation, we use the HTTP ```DELETE``` method:

.. code-block:: javascript

    $.ajax({
        url: 'http://localhost:8000/recommendations/3/',
        type: 'DELETE',
        // Fetch the stored token from localStorage and set in the header
        beforeSend: function (xhr) {
          xhr.setRequestHeader("Authorization", 'Token '+ localStorage.getItem('token'));
        },
        success: function (response) {
          console.log(response);
        }
    });
